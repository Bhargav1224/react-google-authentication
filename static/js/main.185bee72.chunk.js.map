{"version":3,"sources":["utils/refreshToken.js","components/Login.js","components/Logout.js","components/LoginHooks.js","components/LogoutHooks.js","App.js","serviceWorker.js","index.js"],"names":["refreshTokenSetup","res","refreshTiming","tokenObj","expires_in","refreshToken","a","reloadAuthResponse","newAuthRes","console","log","localStorage","setItem","id_token","setTimeout","Login","clientId","buttonText","onSuccess","profileObj","onFailure","cookiePolicy","style","marginTop","isSignedIn","Logout","onLogoutSuccess","LoginHooks","signIn","useGoogleLogin","accessType","onClick","className","src","alt","LogoutHooks","signOut","useGoogleLogout","App","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sQAAaA,EAAoB,SAACC,GAEhC,IAAIC,EAA6D,KAA5CD,EAAIE,SAASC,YAAc,MAE1CC,EAAY,uCAAG,4BAAAC,EAAA,sEACML,EAAIM,qBADV,OACbC,EADa,OAEnBN,EAA2D,KAA1CM,EAAWJ,YAAc,MAC1CK,QAAQC,IAAI,cAAeF,GAE3BG,aAAaC,QAAQ,YAAaJ,EAAWK,UAG7CC,WAAWT,EAAcH,GARN,2CAAH,qDAYlBY,WAAWT,EAAcH,ICkBZa,MAzBf,WAUE,OACE,6BACE,kBAAC,cAAD,CACEC,SAfN,2EAgBMC,WAAW,QACXC,UAdY,SAACjB,GACjBQ,QAAQC,IAAI,8BAA+BT,EAAIkB,YAC/CnB,EAAkBC,IAadmB,UAVY,SAACnB,GACjBQ,QAAQC,IAAI,qBAAsBT,IAU9BoB,aAAc,qBACdC,MAAO,CAAEC,UAAW,SACpBC,YAAY,MCLLC,MAjBf,WAKE,OACE,6BACE,kBAAC,eAAD,CACET,SAVN,2EAWMC,WAAW,SACXS,gBATY,WAChBjB,QAAQC,IAAI,+BAIZ,MCqBWiB,MAxBf,WACE,IAKQC,EAAWC,yBAAe,CAChCX,UANgB,SAACjB,GACjBQ,QAAQC,IAAI,8BAA+BT,EAAIkB,YAC/CnB,EAAkBC,IAKlBe,SAVF,2EAWEQ,YAAY,EACZM,WAAY,YAJNF,OASR,OACE,4BAAQG,QAASH,EAAQI,UAAU,UACjC,yBAAKC,IAAI,mBAAmBC,IAAI,eAAeF,UAAU,SAEzD,0BAAMA,UAAU,cAAhB,yBCESG,MAxBf,WACE,IAQQC,EAAYC,0BAAgB,CAClCrB,SAZF,2EAaEU,gBAVsB,SAACzB,GACvBQ,QAAQC,IAAI,uBAUZU,UAPgB,WAChBX,QAAQC,IAAI,2BAGN0B,QAMR,OACE,4BAAQL,QAASK,EAASJ,UAAU,UAClC,yBAAKC,IAAI,mBAAmBC,IAAI,eAAeF,UAAU,SAEzD,0BAAMA,UAAU,cAAhB,cCFSM,MAhBf,WACE,OACE,yBAAKN,UAAU,OACb,kDACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,6CACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,uBAAGO,KAAK,6DAAR,iBCJcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhD,QAAQgD,MAAMA,EAAMC,a","file":"static/js/main.185bee72.chunk.js","sourcesContent":["export const refreshTokenSetup = (res) => {\r\n  // Timing to renew access token\r\n  let refreshTiming = (res.tokenObj.expires_in || 3600 - 5 * 60) * 1000;\r\n\r\n  const refreshToken = async () => {\r\n    const newAuthRes = await res.reloadAuthResponse();\r\n    refreshTiming = (newAuthRes.expires_in || 3600 - 5 * 60) * 1000;\r\n    console.log('newAuthRes:', newAuthRes);\r\n    // saveUserToken(newAuthRes.access_token);  <-- save new token\r\n    localStorage.setItem('authToken', newAuthRes.id_token);\r\n\r\n    // Setup the other timer after the first one\r\n    setTimeout(refreshToken, refreshTiming);\r\n  };\r\n\r\n  // Setup first refresh timer\r\n  setTimeout(refreshToken, refreshTiming);\r\n};\r\n","import React from 'react';\r\n\r\nimport { GoogleLogin } from 'react-google-login';\r\n// refresh token\r\nimport { refreshTokenSetup } from '../utils/refreshToken';\r\n\r\nconst clientId =\r\n  '707788443358-u05p46nssla3l8tmn58tpo9r5sommgks.apps.googleusercontent.com';\r\n\r\nfunction Login() {\r\n  const onSuccess = (res) => {\r\n    console.log('Login Success: currentUser:', res.profileObj);\r\n    refreshTokenSetup(res);\r\n  };\r\n\r\n  const onFailure = (res) => {\r\n    console.log('Login failed: res:', res);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <GoogleLogin\r\n        clientId={clientId}\r\n        buttonText=\"Login\"\r\n        onSuccess={onSuccess}\r\n        onFailure={onFailure}\r\n        cookiePolicy={'single_host_origin'}\r\n        style={{ marginTop: '100px' }}\r\n        isSignedIn={true}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import React from 'react';\r\nimport { GoogleLogout } from 'react-google-login';\r\n\r\nconst clientId =\r\n  '707788443358-u05p46nssla3l8tmn58tpo9r5sommgks.apps.googleusercontent.com';\r\n\r\nfunction Logout() {\r\n  const onSuccess = () => {\r\n    console.log('Logout made successfully');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <GoogleLogout\r\n        clientId={clientId}\r\n        buttonText=\"Logout\"\r\n        onLogoutSuccess={onSuccess}\r\n      ></GoogleLogout>\r\n      ;\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Logout;\r\n","import React from 'react';\r\nimport { useGoogleLogin } from 'react-google-login';\r\n\r\n// refresh token\r\nimport { refreshTokenSetup } from '../utils/refreshToken';\r\n\r\nconst clientId =\r\n  '707788443358-u05p46nssla3l8tmn58tpo9r5sommgks.apps.googleusercontent.com';\r\n\r\nfunction LoginHooks() {\r\n  const onSuccess = (res) => {\r\n    console.log('Login Success: currentUser:', res.profileObj);\r\n    refreshTokenSetup(res);\r\n  };\r\n\r\n  const { signIn } = useGoogleLogin({\r\n    onSuccess,\r\n    clientId,\r\n    isSignedIn: true,\r\n    accessType: 'offline',\r\n    // responseType: 'code',\r\n    // prompt: 'consent',\r\n  });\r\n\r\n  return (\r\n    <button onClick={signIn} className=\"button\">\r\n      <img src=\"icons/google.svg\" alt=\"google login\" className=\"icon\"></img>\r\n\r\n      <span className=\"buttonText\">Sign in with Google</span>\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default LoginHooks;\r\n","import React from 'react';\r\nimport { useGoogleLogout } from 'react-google-login';\r\n\r\nconst clientId =\r\n  '707788443358-u05p46nssla3l8tmn58tpo9r5sommgks.apps.googleusercontent.com';\r\n\r\nfunction LogoutHooks() {\r\n  const onLogoutSuccess = (res) => {\r\n    console.log('Logged out Success');\r\n  };\r\n\r\n  const onFailure = () => {\r\n    console.log('Handle failure cases');\r\n  };\r\n\r\n  const { signOut } = useGoogleLogout({\r\n    clientId,\r\n    onLogoutSuccess,\r\n    onFailure,\r\n  });\r\n\r\n  return (\r\n    <button onClick={signOut} className=\"button\">\r\n      <img src=\"icons/google.svg\" alt=\"google login\" className=\"icon\"></img>\r\n\r\n      <span className=\"buttonText\">Sign out</span>\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default LogoutHooks;\r\n","import React from 'react';\nimport './App.css';\nimport Login from './components/Login';\nimport Logout from './components/Logout';\nimport LoginHooks from './components/LoginHooks';\nimport LogoutHooks from './components/LogoutHooks';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h2>The Components way</h2>\n      <Login />\n      <Logout />\n      <h2>The Hooks way</h2>\n      <LoginHooks />\n      <LogoutHooks />\n      <a href=\"https://github.com/Sivanesh-S/react-google-authentication\">\n        Github Repo\n      </a>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}